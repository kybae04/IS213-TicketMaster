{"ast":null,"code":"var _jsxFileName = \"/Applications/MAMP/htdocs/ticketmaster/src/components/RouteTransition.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport LoadingOverlay from './LoadingOverlay';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst RouteTransition = ({\n  children\n}) => {\n  _s();\n  const location = useLocation();\n  const [isLoading, setIsLoading] = useState(false);\n  const [prevPathname, setPrevPathname] = useState('');\n  useEffect(() => {\n    // Only show loading on actual route changes (not on initial load)\n    if (prevPathname && prevPathname !== location.pathname) {\n      // Start loading\n      setIsLoading(true);\n\n      // Set a minimum loading time between 400-800ms\n      // This ensures the animation is visible and feels intentional\n      const minLoadTime = 400 + Math.random() * 400;\n      const timer = setTimeout(() => {\n        setIsLoading(false);\n      }, minLoadTime);\n      return () => clearTimeout(timer);\n    }\n\n    // Update previous path after checking\n    setPrevPathname(location.pathname);\n  }, [location.pathname, prevPathname]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(LoadingOverlay, {\n      isLoading: isLoading,\n      fullscreen: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), children]\n  }, void 0, true);\n};\n_s(RouteTransition, \"J5kPetR/2qqOTgyF5Iesv9s2JLg=\", false, function () {\n  return [useLocation];\n});\n_c = RouteTransition;\nexport default RouteTransition;\nvar _c;\n$RefreshReg$(_c, \"RouteTransition\");","map":{"version":3,"names":["React","useState","useEffect","useLocation","LoadingOverlay","jsxDEV","_jsxDEV","Fragment","_Fragment","RouteTransition","children","_s","location","isLoading","setIsLoading","prevPathname","setPrevPathname","pathname","minLoadTime","Math","random","timer","setTimeout","clearTimeout","fullscreen","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Applications/MAMP/htdocs/ticketmaster/src/components/RouteTransition.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport LoadingOverlay from './LoadingOverlay';\n\nconst RouteTransition = ({ children }) => {\n  const location = useLocation();\n  const [isLoading, setIsLoading] = useState(false);\n  const [prevPathname, setPrevPathname] = useState('');\n  \n  useEffect(() => {\n    // Only show loading on actual route changes (not on initial load)\n    if (prevPathname && prevPathname !== location.pathname) {\n      // Start loading\n      setIsLoading(true);\n      \n      // Set a minimum loading time between 400-800ms\n      // This ensures the animation is visible and feels intentional\n      const minLoadTime = 400 + Math.random() * 400;\n      \n      const timer = setTimeout(() => {\n        setIsLoading(false);\n      }, minLoadTime);\n      \n      return () => clearTimeout(timer);\n    }\n    \n    // Update previous path after checking\n    setPrevPathname(location.pathname);\n  }, [location.pathname, prevPathname]);\n  \n  return (\n    <>\n      <LoadingOverlay isLoading={isLoading} fullscreen={true} />\n      {children}\n    </>\n  );\n};\n\nexport default RouteTransition; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,cAAc,MAAM,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE9C,MAAMC,eAAe,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACxC,MAAMC,QAAQ,GAAGT,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACU,SAAS,EAAEC,YAAY,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACc,YAAY,EAAEC,eAAe,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAEpDC,SAAS,CAAC,MAAM;IACd;IACA,IAAIa,YAAY,IAAIA,YAAY,KAAKH,QAAQ,CAACK,QAAQ,EAAE;MACtD;MACAH,YAAY,CAAC,IAAI,CAAC;;MAElB;MACA;MACA,MAAMI,WAAW,GAAG,GAAG,GAAGC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG;MAE7C,MAAMC,KAAK,GAAGC,UAAU,CAAC,MAAM;QAC7BR,YAAY,CAAC,KAAK,CAAC;MACrB,CAAC,EAAEI,WAAW,CAAC;MAEf,OAAO,MAAMK,YAAY,CAACF,KAAK,CAAC;IAClC;;IAEA;IACAL,eAAe,CAACJ,QAAQ,CAACK,QAAQ,CAAC;EACpC,CAAC,EAAE,CAACL,QAAQ,CAACK,QAAQ,EAAEF,YAAY,CAAC,CAAC;EAErC,oBACET,OAAA,CAAAE,SAAA;IAAAE,QAAA,gBACEJ,OAAA,CAACF,cAAc;MAACS,SAAS,EAAEA,SAAU;MAACW,UAAU,EAAE;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EACzDlB,QAAQ;EAAA,eACT,CAAC;AAEP,CAAC;AAACC,EAAA,CAhCIF,eAAe;EAAA,QACFN,WAAW;AAAA;AAAA0B,EAAA,GADxBpB,eAAe;AAkCrB,eAAeA,eAAe;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}