{"ast":null,"code":"import supabase from '../supabaseClient';\n\n/**\n * Register a new user with email and password\n * @param {string} email - User's email\n * @param {string} password - User's password\n * @returns {Promise} - Supabase sign-up response\n */\nexport const signUp = async (email, password) => {\n  const {\n    data,\n    error\n  } = await supabase.auth.signUp({\n    email,\n    password\n  });\n  if (error) {\n    throw error;\n  }\n  return data;\n};\n\n/**\n * Sign in a user with email and password\n * @param {string} email - User's email\n * @param {string} password - User's password\n * @returns {Promise} - Supabase sign-in response\n */\nexport const signIn = async (email, password) => {\n  const {\n    data,\n    error\n  } = await supabase.auth.signInWithPassword({\n    email,\n    password\n  });\n  if (error) {\n    throw error;\n  }\n  return data;\n};\n\n/**\n * Sign out the current user\n * @returns {Promise} - Supabase sign-out response\n */\nexport const signOut = async () => {\n  const {\n    error\n  } = await supabase.auth.signOut();\n  if (error) {\n    throw error;\n  }\n  return true;\n};\n\n/**\n * Get the current user session\n * @returns {Promise} - Supabase session data\n */\nexport const getCurrentSession = async () => {\n  const {\n    data,\n    error\n  } = await supabase.auth.getSession();\n  if (error) {\n    throw error;\n  }\n  return data;\n};\n\n/**\n * Get the current user\n * @returns {Promise} - Supabase user data\n */\nexport const getCurrentUser = async () => {\n  const {\n    data,\n    error\n  } = await supabase.auth.getUser();\n  if (error) {\n    throw error;\n  }\n  return data.user;\n};","map":{"version":3,"names":["supabase","signUp","email","password","data","error","auth","signIn","signInWithPassword","signOut","getCurrentSession","getSession","getCurrentUser","getUser","user"],"sources":["/Applications/MAMP/htdocs/ticketmaster/src/services/authService.js"],"sourcesContent":["import supabase from '../supabaseClient';\n\n/**\n * Register a new user with email and password\n * @param {string} email - User's email\n * @param {string} password - User's password\n * @returns {Promise} - Supabase sign-up response\n */\nexport const signUp = async (email, password) => {\n  const { data, error } = await supabase.auth.signUp({\n    email,\n    password,\n  });\n  \n  if (error) {\n    throw error;\n  }\n  \n  return data;\n};\n\n/**\n * Sign in a user with email and password\n * @param {string} email - User's email\n * @param {string} password - User's password\n * @returns {Promise} - Supabase sign-in response\n */\nexport const signIn = async (email, password) => {\n  const { data, error } = await supabase.auth.signInWithPassword({\n    email,\n    password,\n  });\n  \n  if (error) {\n    throw error;\n  }\n  \n  return data;\n};\n\n/**\n * Sign out the current user\n * @returns {Promise} - Supabase sign-out response\n */\nexport const signOut = async () => {\n  const { error } = await supabase.auth.signOut();\n  \n  if (error) {\n    throw error;\n  }\n  \n  return true;\n};\n\n/**\n * Get the current user session\n * @returns {Promise} - Supabase session data\n */\nexport const getCurrentSession = async () => {\n  const { data, error } = await supabase.auth.getSession();\n  \n  if (error) {\n    throw error;\n  }\n  \n  return data;\n};\n\n/**\n * Get the current user\n * @returns {Promise} - Supabase user data\n */\nexport const getCurrentUser = async () => {\n  const { data, error } = await supabase.auth.getUser();\n  \n  if (error) {\n    throw error;\n  }\n  \n  return data.user;\n}; "],"mappings":"AAAA,OAAOA,QAAQ,MAAM,mBAAmB;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,MAAM,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;EAC/C,MAAM;IAAEC,IAAI;IAAEC;EAAM,CAAC,GAAG,MAAML,QAAQ,CAACM,IAAI,CAACL,MAAM,CAAC;IACjDC,KAAK;IACLC;EACF,CAAC,CAAC;EAEF,IAAIE,KAAK,EAAE;IACT,MAAMA,KAAK;EACb;EAEA,OAAOD,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMG,MAAM,GAAG,MAAAA,CAAOL,KAAK,EAAEC,QAAQ,KAAK;EAC/C,MAAM;IAAEC,IAAI;IAAEC;EAAM,CAAC,GAAG,MAAML,QAAQ,CAACM,IAAI,CAACE,kBAAkB,CAAC;IAC7DN,KAAK;IACLC;EACF,CAAC,CAAC;EAEF,IAAIE,KAAK,EAAE;IACT,MAAMA,KAAK;EACb;EAEA,OAAOD,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMK,OAAO,GAAG,MAAAA,CAAA,KAAY;EACjC,MAAM;IAAEJ;EAAM,CAAC,GAAG,MAAML,QAAQ,CAACM,IAAI,CAACG,OAAO,CAAC,CAAC;EAE/C,IAAIJ,KAAK,EAAE;IACT,MAAMA,KAAK;EACb;EAEA,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMK,iBAAiB,GAAG,MAAAA,CAAA,KAAY;EAC3C,MAAM;IAAEN,IAAI;IAAEC;EAAM,CAAC,GAAG,MAAML,QAAQ,CAACM,IAAI,CAACK,UAAU,CAAC,CAAC;EAExD,IAAIN,KAAK,EAAE;IACT,MAAMA,KAAK;EACb;EAEA,OAAOD,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMQ,cAAc,GAAG,MAAAA,CAAA,KAAY;EACxC,MAAM;IAAER,IAAI;IAAEC;EAAM,CAAC,GAAG,MAAML,QAAQ,CAACM,IAAI,CAACO,OAAO,CAAC,CAAC;EAErD,IAAIR,KAAK,EAAE;IACT,MAAMA,KAAK;EACb;EAEA,OAAOD,IAAI,CAACU,IAAI;AAClB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}