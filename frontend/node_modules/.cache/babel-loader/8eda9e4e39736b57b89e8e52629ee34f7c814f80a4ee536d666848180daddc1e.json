{"ast":null,"code":"var _jsxFileName = \"/Applications/MAMP/htdocs/ticketmaster/src/components/RouteTransition.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport LoadingOverlay from './LoadingOverlay';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst RouteTransition = ({\n  children\n}) => {\n  _s();\n  const location = useLocation();\n  const [isLoading, setIsLoading] = useState(false);\n  const [prevPathname, setPrevPathname] = useState('');\n  useEffect(() => {\n    // Keep track of initial render\n    if (!prevPathname) {\n      setPrevPathname(location.pathname);\n      return;\n    }\n\n    // Only show loading on actual route changes (not on initial load)\n    if (prevPathname !== location.pathname) {\n      // Check if this is a direct navigation with state that needs to be preserved\n      // (like when trading or cancelling tickets)\n      const isNavigationWithState = location.state && Object.keys(location.state).length > 0 && (location.pathname === '/trade-success' || location.pathname === '/cancellation-success');\n\n      // Only show loading when not navigating to pages that need state\n      if (!isNavigationWithState) {\n        // Start loading\n        setIsLoading(true);\n\n        // Set a minimum loading time between 300-700ms\n        // This ensures the animation is visible but not too long\n        const minLoadTime = 300 + Math.random() * 400;\n        const timer = setTimeout(() => {\n          setIsLoading(false);\n          // Only update previous path after animation completes\n          setPrevPathname(location.pathname);\n        }, minLoadTime);\n        return () => clearTimeout(timer);\n      } else {\n        // Just update the pathname without showing loading\n        setPrevPathname(location.pathname);\n      }\n    }\n  }, [location.pathname, location.state, prevPathname]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [isLoading && /*#__PURE__*/_jsxDEV(LoadingOverlay, {\n      isLoading: true,\n      fullscreen: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 21\n    }, this), children]\n  }, void 0, true);\n};\n_s(RouteTransition, \"J5kPetR/2qqOTgyF5Iesv9s2JLg=\", false, function () {\n  return [useLocation];\n});\n_c = RouteTransition;\nexport default RouteTransition;\nvar _c;\n$RefreshReg$(_c, \"RouteTransition\");","map":{"version":3,"names":["React","useState","useEffect","useLocation","LoadingOverlay","jsxDEV","_jsxDEV","Fragment","_Fragment","RouteTransition","children","_s","location","isLoading","setIsLoading","prevPathname","setPrevPathname","pathname","isNavigationWithState","state","Object","keys","length","minLoadTime","Math","random","timer","setTimeout","clearTimeout","fullscreen","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Applications/MAMP/htdocs/ticketmaster/src/components/RouteTransition.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport LoadingOverlay from './LoadingOverlay';\n\nconst RouteTransition = ({ children }) => {\n  const location = useLocation();\n  const [isLoading, setIsLoading] = useState(false);\n  const [prevPathname, setPrevPathname] = useState('');\n  \n  useEffect(() => {\n    // Keep track of initial render\n    if (!prevPathname) {\n      setPrevPathname(location.pathname);\n      return;\n    }\n    \n    // Only show loading on actual route changes (not on initial load)\n    if (prevPathname !== location.pathname) {\n      // Check if this is a direct navigation with state that needs to be preserved\n      // (like when trading or cancelling tickets)\n      const isNavigationWithState = location.state && \n        (Object.keys(location.state).length > 0) && \n        (location.pathname === '/trade-success' || \n         location.pathname === '/cancellation-success');\n      \n      // Only show loading when not navigating to pages that need state\n      if (!isNavigationWithState) {\n        // Start loading\n        setIsLoading(true);\n        \n        // Set a minimum loading time between 300-700ms\n        // This ensures the animation is visible but not too long\n        const minLoadTime = 300 + Math.random() * 400;\n        \n        const timer = setTimeout(() => {\n          setIsLoading(false);\n          // Only update previous path after animation completes\n          setPrevPathname(location.pathname);\n        }, minLoadTime);\n        \n        return () => clearTimeout(timer);\n      } else {\n        // Just update the pathname without showing loading\n        setPrevPathname(location.pathname);\n      }\n    }\n  }, [location.pathname, location.state, prevPathname]);\n  \n  return (\n    <>\n      {isLoading && <LoadingOverlay isLoading={true} fullscreen={true} />}\n      {children}\n    </>\n  );\n};\n\nexport default RouteTransition; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,cAAc,MAAM,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE9C,MAAMC,eAAe,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACxC,MAAMC,QAAQ,GAAGT,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACU,SAAS,EAAEC,YAAY,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACc,YAAY,EAAEC,eAAe,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAEpDC,SAAS,CAAC,MAAM;IACd;IACA,IAAI,CAACa,YAAY,EAAE;MACjBC,eAAe,CAACJ,QAAQ,CAACK,QAAQ,CAAC;MAClC;IACF;;IAEA;IACA,IAAIF,YAAY,KAAKH,QAAQ,CAACK,QAAQ,EAAE;MACtC;MACA;MACA,MAAMC,qBAAqB,GAAGN,QAAQ,CAACO,KAAK,IACzCC,MAAM,CAACC,IAAI,CAACT,QAAQ,CAACO,KAAK,CAAC,CAACG,MAAM,GAAG,CAAE,KACvCV,QAAQ,CAACK,QAAQ,KAAK,gBAAgB,IACtCL,QAAQ,CAACK,QAAQ,KAAK,uBAAuB,CAAC;;MAEjD;MACA,IAAI,CAACC,qBAAqB,EAAE;QAC1B;QACAJ,YAAY,CAAC,IAAI,CAAC;;QAElB;QACA;QACA,MAAMS,WAAW,GAAG,GAAG,GAAGC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG;QAE7C,MAAMC,KAAK,GAAGC,UAAU,CAAC,MAAM;UAC7Bb,YAAY,CAAC,KAAK,CAAC;UACnB;UACAE,eAAe,CAACJ,QAAQ,CAACK,QAAQ,CAAC;QACpC,CAAC,EAAEM,WAAW,CAAC;QAEf,OAAO,MAAMK,YAAY,CAACF,KAAK,CAAC;MAClC,CAAC,MAAM;QACL;QACAV,eAAe,CAACJ,QAAQ,CAACK,QAAQ,CAAC;MACpC;IACF;EACF,CAAC,EAAE,CAACL,QAAQ,CAACK,QAAQ,EAAEL,QAAQ,CAACO,KAAK,EAAEJ,YAAY,CAAC,CAAC;EAErD,oBACET,OAAA,CAAAE,SAAA;IAAAE,QAAA,GACGG,SAAS,iBAAIP,OAAA,CAACF,cAAc;MAACS,SAAS,EAAE,IAAK;MAACgB,UAAU,EAAE;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAClEvB,QAAQ;EAAA,eACT,CAAC;AAEP,CAAC;AAACC,EAAA,CAlDIF,eAAe;EAAA,QACFN,WAAW;AAAA;AAAA+B,EAAA,GADxBzB,eAAe;AAoDrB,eAAeA,eAAe;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}