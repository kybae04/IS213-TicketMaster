{"ast":null,"code":"import supabase from '../supabaseClient';\n\n// Check if we're using placeholder values (development environment without real credentials)\nconst isUsingPlaceholders = supabase.supabaseUrl.includes('placeholder-project');\n\n/**\n * Register a new user with email and password\n * @param {string} email - User's email\n * @param {string} password - User's password\n * @returns {Promise} - Supabase sign-up response\n */\nexport const signUp = async (email, password) => {\n  if (isUsingPlaceholders) {\n    console.log('Development mode: Mock sign-up for', email);\n    return {\n      user: {\n        email\n      },\n      session: null\n    };\n  }\n  const {\n    data,\n    error\n  } = await supabase.auth.signUp({\n    email,\n    password\n  });\n  if (error) {\n    throw error;\n  }\n  return data;\n};\n\n/**\n * Sign in a user with email and password\n * @param {string} email - User's email\n * @param {string} password - User's password\n * @returns {Promise} - Supabase sign-in response\n */\nexport const signIn = async (email, password) => {\n  if (isUsingPlaceholders) {\n    console.log('Development mode: Mock sign-in for', email);\n    return {\n      user: {\n        id: 'mock-user-id',\n        email,\n        created_at: new Date().toISOString()\n      },\n      session: {\n        access_token: 'mock-token'\n      }\n    };\n  }\n  const {\n    data,\n    error\n  } = await supabase.auth.signInWithPassword({\n    email,\n    password\n  });\n  if (error) {\n    throw error;\n  }\n  return data;\n};\n\n/**\n * Sign out the current user\n * @returns {Promise} - Supabase sign-out response\n */\nexport const signOut = async () => {\n  if (isUsingPlaceholders) {\n    console.log('Development mode: Mock sign-out');\n    return true;\n  }\n  const {\n    error\n  } = await supabase.auth.signOut();\n  if (error) {\n    throw error;\n  }\n  return true;\n};\n\n/**\n * Get the current user session\n * @returns {Promise} - Supabase session data\n */\nexport const getCurrentSession = async () => {\n  if (isUsingPlaceholders) {\n    console.log('Development mode: Mock session retrieval');\n    return {\n      session: null\n    };\n  }\n  const {\n    data,\n    error\n  } = await supabase.auth.getSession();\n  if (error) {\n    throw error;\n  }\n  return data;\n};\n\n/**\n * Get the current user\n * @returns {Promise} - Supabase user data\n */\nexport const getCurrentUser = async () => {\n  if (isUsingPlaceholders) {\n    console.log('Development mode: Mock user retrieval');\n    return null;\n  }\n  const {\n    data,\n    error\n  } = await supabase.auth.getUser();\n  if (error) {\n    throw error;\n  }\n  return data.user;\n};","map":{"version":3,"names":["supabase","isUsingPlaceholders","supabaseUrl","includes","signUp","email","password","console","log","user","session","data","error","auth","signIn","id","created_at","Date","toISOString","access_token","signInWithPassword","signOut","getCurrentSession","getSession","getCurrentUser","getUser"],"sources":["/Applications/MAMP/htdocs/ticketmaster/src/services/authService.js"],"sourcesContent":["import supabase from '../supabaseClient';\n\n// Check if we're using placeholder values (development environment without real credentials)\nconst isUsingPlaceholders = supabase.supabaseUrl.includes('placeholder-project');\n\n/**\n * Register a new user with email and password\n * @param {string} email - User's email\n * @param {string} password - User's password\n * @returns {Promise} - Supabase sign-up response\n */\nexport const signUp = async (email, password) => {\n  if (isUsingPlaceholders) {\n    console.log('Development mode: Mock sign-up for', email);\n    return { user: { email }, session: null };\n  }\n\n  const { data, error } = await supabase.auth.signUp({\n    email,\n    password,\n  });\n  \n  if (error) {\n    throw error;\n  }\n  \n  return data;\n};\n\n/**\n * Sign in a user with email and password\n * @param {string} email - User's email\n * @param {string} password - User's password\n * @returns {Promise} - Supabase sign-in response\n */\nexport const signIn = async (email, password) => {\n  if (isUsingPlaceholders) {\n    console.log('Development mode: Mock sign-in for', email);\n    return { \n      user: { \n        id: 'mock-user-id',\n        email,\n        created_at: new Date().toISOString()\n      }, \n      session: { \n        access_token: 'mock-token'\n      } \n    };\n  }\n\n  const { data, error } = await supabase.auth.signInWithPassword({\n    email,\n    password,\n  });\n  \n  if (error) {\n    throw error;\n  }\n  \n  return data;\n};\n\n/**\n * Sign out the current user\n * @returns {Promise} - Supabase sign-out response\n */\nexport const signOut = async () => {\n  if (isUsingPlaceholders) {\n    console.log('Development mode: Mock sign-out');\n    return true;\n  }\n\n  const { error } = await supabase.auth.signOut();\n  \n  if (error) {\n    throw error;\n  }\n  \n  return true;\n};\n\n/**\n * Get the current user session\n * @returns {Promise} - Supabase session data\n */\nexport const getCurrentSession = async () => {\n  if (isUsingPlaceholders) {\n    console.log('Development mode: Mock session retrieval');\n    return { session: null };\n  }\n\n  const { data, error } = await supabase.auth.getSession();\n  \n  if (error) {\n    throw error;\n  }\n  \n  return data;\n};\n\n/**\n * Get the current user\n * @returns {Promise} - Supabase user data\n */\nexport const getCurrentUser = async () => {\n  if (isUsingPlaceholders) {\n    console.log('Development mode: Mock user retrieval');\n    return null;\n  }\n\n  const { data, error } = await supabase.auth.getUser();\n  \n  if (error) {\n    throw error;\n  }\n  \n  return data.user;\n}; "],"mappings":"AAAA,OAAOA,QAAQ,MAAM,mBAAmB;;AAExC;AACA,MAAMC,mBAAmB,GAAGD,QAAQ,CAACE,WAAW,CAACC,QAAQ,CAAC,qBAAqB,CAAC;;AAEhF;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,MAAM,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;EAC/C,IAAIL,mBAAmB,EAAE;IACvBM,OAAO,CAACC,GAAG,CAAC,oCAAoC,EAAEH,KAAK,CAAC;IACxD,OAAO;MAAEI,IAAI,EAAE;QAAEJ;MAAM,CAAC;MAAEK,OAAO,EAAE;IAAK,CAAC;EAC3C;EAEA,MAAM;IAAEC,IAAI;IAAEC;EAAM,CAAC,GAAG,MAAMZ,QAAQ,CAACa,IAAI,CAACT,MAAM,CAAC;IACjDC,KAAK;IACLC;EACF,CAAC,CAAC;EAEF,IAAIM,KAAK,EAAE;IACT,MAAMA,KAAK;EACb;EAEA,OAAOD,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMG,MAAM,GAAG,MAAAA,CAAOT,KAAK,EAAEC,QAAQ,KAAK;EAC/C,IAAIL,mBAAmB,EAAE;IACvBM,OAAO,CAACC,GAAG,CAAC,oCAAoC,EAAEH,KAAK,CAAC;IACxD,OAAO;MACLI,IAAI,EAAE;QACJM,EAAE,EAAE,cAAc;QAClBV,KAAK;QACLW,UAAU,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;MACrC,CAAC;MACDR,OAAO,EAAE;QACPS,YAAY,EAAE;MAChB;IACF,CAAC;EACH;EAEA,MAAM;IAAER,IAAI;IAAEC;EAAM,CAAC,GAAG,MAAMZ,QAAQ,CAACa,IAAI,CAACO,kBAAkB,CAAC;IAC7Df,KAAK;IACLC;EACF,CAAC,CAAC;EAEF,IAAIM,KAAK,EAAE;IACT,MAAMA,KAAK;EACb;EAEA,OAAOD,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMU,OAAO,GAAG,MAAAA,CAAA,KAAY;EACjC,IAAIpB,mBAAmB,EAAE;IACvBM,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;IAC9C,OAAO,IAAI;EACb;EAEA,MAAM;IAAEI;EAAM,CAAC,GAAG,MAAMZ,QAAQ,CAACa,IAAI,CAACQ,OAAO,CAAC,CAAC;EAE/C,IAAIT,KAAK,EAAE;IACT,MAAMA,KAAK;EACb;EAEA,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMU,iBAAiB,GAAG,MAAAA,CAAA,KAAY;EAC3C,IAAIrB,mBAAmB,EAAE;IACvBM,OAAO,CAACC,GAAG,CAAC,0CAA0C,CAAC;IACvD,OAAO;MAAEE,OAAO,EAAE;IAAK,CAAC;EAC1B;EAEA,MAAM;IAAEC,IAAI;IAAEC;EAAM,CAAC,GAAG,MAAMZ,QAAQ,CAACa,IAAI,CAACU,UAAU,CAAC,CAAC;EAExD,IAAIX,KAAK,EAAE;IACT,MAAMA,KAAK;EACb;EAEA,OAAOD,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMa,cAAc,GAAG,MAAAA,CAAA,KAAY;EACxC,IAAIvB,mBAAmB,EAAE;IACvBM,OAAO,CAACC,GAAG,CAAC,uCAAuC,CAAC;IACpD,OAAO,IAAI;EACb;EAEA,MAAM;IAAEG,IAAI;IAAEC;EAAM,CAAC,GAAG,MAAMZ,QAAQ,CAACa,IAAI,CAACY,OAAO,CAAC,CAAC;EAErD,IAAIb,KAAK,EAAE;IACT,MAAMA,KAAK;EACb;EAEA,OAAOD,IAAI,CAACF,IAAI;AAClB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}