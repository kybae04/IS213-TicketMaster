{"ast":null,"code":"var _jsxFileName = \"/Applications/MAMP/htdocs/ticketmaster/src/context/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport { getCurrentSession, getCurrentUser, signOut, signIn } from '../services/authService';\nimport supabase from '../supabaseClient';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport function AuthProvider({\n  children\n}) {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Initialize authentication state\n  useEffect(() => {\n    console.log(\"AuthProvider initialized, checking for stored user\");\n    async function init() {\n      console.log(\"Using Supabase auth\");\n      // Check active session with Supabase\n      try {\n        const session = await getCurrentSession();\n        if (session !== null && session !== void 0 && session.session) {\n          const userData = await getCurrentUser();\n          setUser(userData);\n        }\n      } catch (error) {\n        console.error('Error loading user:', error);\n      } finally {\n        setLoading(false);\n      }\n\n      // Listen for auth changes with Supabase\n      const {\n        data: authListener\n      } = supabase.auth.onAuthStateChange(async (event, session) => {\n        console.log(\"Auth state changed:\", event);\n        if (event === 'SIGNED_IN' && session) {\n          const user = await getCurrentUser();\n          setUser(user);\n        } else if (event === 'SIGNED_OUT') {\n          setUser(null);\n        }\n      });\n\n      // Cleanup function\n      return () => {\n        if (authListener && authListener.subscription) {\n          authListener.subscription.unsubscribe();\n        }\n      };\n    }\n    init();\n  }, []);\n  const login = async (email, password) => {\n    console.log(\"Login attempt for:\", email);\n    try {\n      const data = await signIn(email, password);\n      if (data.user) {\n        setUser(data.user);\n        return data;\n      }\n      throw new Error('Login failed');\n    } catch (error) {\n      console.error('Error logging in:', error);\n      throw error;\n    }\n  };\n  const logout = async () => {\n    console.log(\"Logout attempt\");\n    try {\n      await signOut();\n      setUser(null);\n      return true;\n    } catch (error) {\n      console.error('Error signing out:', error);\n      return false;\n    }\n  };\n\n  // Make auth state available to consumers\n  const value = {\n    user,\n    loading,\n    login,\n    logout,\n    isAuthenticated: !!user\n  };\n\n  // Log auth state for debugging\n  console.log(\"Auth state:\", {\n    isAuthenticated: !!user,\n    loading,\n    userEmail: user === null || user === void 0 ? void 0 : user.email\n  });\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 10\n  }, this);\n}\n\n// Custom hook to use the auth context\n_s(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nexport function useAuth() {\n  _s2();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","getCurrentSession","getCurrentUser","signOut","signIn","supabase","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","loading","setLoading","console","log","init","session","userData","error","data","authListener","auth","onAuthStateChange","event","subscription","unsubscribe","login","email","password","Error","logout","value","isAuthenticated","userEmail","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","undefined","$RefreshReg$"],"sources":["/Applications/MAMP/htdocs/ticketmaster/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext } from 'react';\nimport { getCurrentSession, getCurrentUser, signOut, signIn } from '../services/authService';\nimport supabase from '../supabaseClient';\n\nconst AuthContext = createContext();\n\nexport function AuthProvider({ children }) {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Initialize authentication state\n  useEffect(() => {\n    console.log(\"AuthProvider initialized, checking for stored user\");\n    \n    async function init() {\n      console.log(\"Using Supabase auth\");\n      // Check active session with Supabase\n      try {\n        const session = await getCurrentSession();\n        if (session?.session) {\n          const userData = await getCurrentUser();\n          setUser(userData);\n        }\n      } catch (error) {\n        console.error('Error loading user:', error);\n      } finally {\n        setLoading(false);\n      }\n      \n      // Listen for auth changes with Supabase\n      const { data: authListener } = supabase.auth.onAuthStateChange(\n        async (event, session) => {\n          console.log(\"Auth state changed:\", event);\n          if (event === 'SIGNED_IN' && session) {\n            const user = await getCurrentUser();\n            setUser(user);\n          } else if (event === 'SIGNED_OUT') {\n            setUser(null);\n          }\n        }\n      );\n\n      // Cleanup function\n      return () => {\n        if (authListener && authListener.subscription) {\n          authListener.subscription.unsubscribe();\n        }\n      };\n    }\n    \n    init();\n  }, []);\n\n  const login = async (email, password) => {\n    console.log(\"Login attempt for:\", email);\n    try {\n      const data = await signIn(email, password);\n      \n      if (data.user) {\n        setUser(data.user);\n        return data;\n      }\n      \n      throw new Error('Login failed');\n    } catch (error) {\n      console.error('Error logging in:', error);\n      throw error;\n    }\n  };\n\n  const logout = async () => {\n    console.log(\"Logout attempt\");\n    try {\n      await signOut();\n      setUser(null);\n      return true;\n    } catch (error) {\n      console.error('Error signing out:', error);\n      return false;\n    }\n  };\n\n  // Make auth state available to consumers\n  const value = {\n    user,\n    loading,\n    login,\n    logout,\n    isAuthenticated: !!user\n  };\n\n  // Log auth state for debugging\n  console.log(\"Auth state:\", { \n    isAuthenticated: !!user, \n    loading,\n    userEmail: user?.email\n  });\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n}\n\n// Custom hook to use the auth context\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}