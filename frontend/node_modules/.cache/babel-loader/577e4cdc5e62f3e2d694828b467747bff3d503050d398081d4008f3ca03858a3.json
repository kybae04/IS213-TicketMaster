{"ast":null,"code":"var _jsxFileName = \"/Applications/MAMP/htdocs/ticketmaster/src/context/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport { getCurrentSession, getCurrentUser, signOut, signIn } from '../services/authService';\nimport { storeAuthInSW, getAuthFromSW, clearAuthFromSW } from '../services/authServiceWorker';\nimport supabase from '../supabaseClient';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n// Check if we're using placeholder values\nconst isUsingPlaceholders = supabase.supabaseUrl.includes('placeholder-project');\n\n// Local storage keys for the mock user - check multiple keys to maximize chances of finding a user\nconst STORAGE_KEYS = ['devModeUser_v2', 'devModeUser_v1', 'devModeUser', 'devModeUser_bypass'];\nexport function AuthProvider({\n  children\n}) {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Check for dev mode user in localStorage and service worker on initial load\n  useEffect(() => {\n    console.log(\"AuthProvider initialized, checking for stored user\");\n    const checkStoredUser = async () => {\n      // If we're in dev mode, check local storage first\n      if (isUsingPlaceholders) {\n        console.log(\"Using placeholder mode, checking localStorage for multiple keys\");\n\n        // Try all possible storage keys\n        for (const key of STORAGE_KEYS) {\n          try {\n            const storedUser = localStorage.getItem(key);\n            if (storedUser) {\n              const parsedUser = JSON.parse(storedUser);\n              console.log(`Found stored dev mode user in ${key}:`, parsedUser);\n              setUser(parsedUser);\n\n              // Also store in service worker for extra persistence\n              try {\n                await storeAuthInSW(parsedUser);\n              } catch (e) {\n                console.error(\"Error storing user in service worker:\", e);\n              }\n              setLoading(false);\n              return true;\n            }\n          } catch (err) {\n            console.error(`Error parsing stored user from ${key}:`, err);\n            localStorage.removeItem(key);\n          }\n        }\n\n        // If not found in localStorage, try service worker\n        try {\n          const swUser = await getAuthFromSW();\n          if (swUser) {\n            console.log(\"Found user in service worker:\", swUser);\n            setUser(swUser);\n\n            // Also store in localStorage for extra persistence\n            localStorage.setItem(STORAGE_KEYS[0], JSON.stringify(swUser));\n            setLoading(false);\n            return true;\n          }\n        } catch (e) {\n          console.error(\"Error getting user from service worker:\", e);\n        }\n      }\n      return false;\n    };\n\n    // If no stored user, continue with normal flow\n    async function init() {\n      const userFound = await checkStoredUser();\n      if (!userFound) {\n        if (!isUsingPlaceholders) {\n          console.log(\"Using real Supabase auth\");\n          // Check active session with Supabase\n          try {\n            const session = await getCurrentSession();\n            if (session !== null && session !== void 0 && session.session) {\n              const userData = await getCurrentUser();\n              setUser(userData);\n            }\n          } catch (error) {\n            console.error('Error loading user:', error);\n          } finally {\n            setLoading(false);\n          }\n\n          // Listen for auth changes with Supabase\n          const {\n            data: authListener\n          } = supabase.auth.onAuthStateChange(async (event, session) => {\n            console.log(\"Auth state changed:\", event);\n            if (event === 'SIGNED_IN' && session) {\n              const user = await getCurrentUser();\n              setUser(user);\n            } else if (event === 'SIGNED_OUT') {\n              setUser(null);\n            }\n          });\n\n          // Cleanup function\n          return () => {\n            if (authListener && authListener.subscription) {\n              authListener.subscription.unsubscribe();\n            }\n          };\n        } else {\n          // In development mode with no stored user, just set loading to false\n          console.log(\"Development mode with no stored user\");\n          setLoading(false);\n        }\n      }\n    }\n    init();\n  }, []);\n  const login = async (email, password) => {\n    console.log(\"Login attempt for:\", email);\n    try {\n      // In dev mode, bypass real auth and use mock data\n      if (isUsingPlaceholders) {\n        console.log(\"Using mock login in dev mode\");\n        return await devModeLogin(email);\n      }\n\n      // Real Supabase auth\n      const data = await signIn(email, password);\n      if (data.user) {\n        setUser(data.user);\n        return data;\n      }\n      throw new Error('Login failed');\n    } catch (error) {\n      console.error('Error logging in:', error);\n      throw error;\n    }\n  };\n  const logout = async () => {\n    console.log(\"Logout attempt\");\n    try {\n      if (isUsingPlaceholders) {\n        console.log(\"Removing dev mode user\");\n\n        // Clear all possible storage keys\n        for (const key of STORAGE_KEYS) {\n          localStorage.removeItem(key);\n        }\n\n        // Also clear from service worker\n        try {\n          await clearAuthFromSW();\n        } catch (e) {\n          console.error(\"Error clearing user from service worker:\", e);\n        }\n        setUser(null);\n        return true;\n      }\n      await signOut();\n      setUser(null);\n      return true;\n    } catch (error) {\n      console.error('Error signing out:', error);\n      return false;\n    }\n  };\n\n  // For development mode, let's add a function to simulate login\n  const devModeLogin = async email => {\n    console.log(\"Dev mode login for:\", email);\n    if (isUsingPlaceholders) {\n      const mockUser = {\n        id: 'mock-user-id',\n        email: email || 'test@example.com',\n        user_metadata: {\n          name: 'Test User'\n        },\n        created_at: new Date().toISOString()\n      };\n      try {\n        // Clear any existing user data from all possible keys\n        for (const key of STORAGE_KEYS) {\n          localStorage.removeItem(key);\n        }\n\n        // Store mock user in all storage keys for redundancy\n        for (const key of STORAGE_KEYS) {\n          localStorage.setItem(key, JSON.stringify(mockUser));\n        }\n\n        // Also store in service worker for extra persistence\n        try {\n          await storeAuthInSW(mockUser);\n        } catch (e) {\n          console.error(\"Error storing user in service worker:\", e);\n        }\n\n        // Update state immediately\n        setUser(mockUser);\n        console.log('Dev mode login successful, user state updated:', mockUser);\n\n        // Force a reload to ensure all components pick up the new user\n        setTimeout(() => {\n          window.location.reload();\n        }, 500);\n\n        // Return a promise to match the signature of the real login\n        return Promise.resolve({\n          user: mockUser\n        });\n      } catch (error) {\n        console.error('Error in dev mode login:', error);\n        return Promise.reject(new Error('Failed to store mock user'));\n      }\n    }\n    return Promise.reject(new Error('Dev mode not enabled'));\n  };\n\n  // Force update the authentication state (useful when localStorage is cleared manually)\n  const checkAuthState = async () => {\n    console.log(\"Checking auth state\");\n    if (isUsingPlaceholders) {\n      try {\n        // Try all possible storage keys\n        for (const key of STORAGE_KEYS) {\n          const storedUser = localStorage.getItem(key);\n          if (storedUser) {\n            try {\n              const parsedUser = JSON.parse(storedUser);\n              console.log(`Setting user from stored data in ${key}:`, parsedUser.email);\n              setUser(parsedUser);\n              return true;\n            } catch (err) {\n              console.error(`Error parsing stored user from ${key}:`, err);\n              localStorage.removeItem(key);\n            }\n          }\n        }\n\n        // If not found in localStorage, try service worker as a backup\n        try {\n          const swUser = await getAuthFromSW();\n          if (swUser) {\n            console.log(\"Found user in service worker:\", swUser);\n            setUser(swUser);\n\n            // Also store in localStorage for extra persistence\n            localStorage.setItem(STORAGE_KEYS[0], JSON.stringify(swUser));\n            return true;\n          }\n        } catch (e) {\n          console.error(\"Error getting user from service worker:\", e);\n        }\n\n        // If we get here, no valid user was found\n        setUser(null);\n        console.log(\"No stored user found in any location, setting user to null\");\n        return false;\n      } catch (error) {\n        console.error('Error checking auth state:', error);\n        setUser(null);\n        return false;\n      }\n    }\n    return !!user;\n  };\n\n  // Make auth state available to consumers\n  const value = {\n    user,\n    loading,\n    login,\n    logout,\n    isAuthenticated: !!user,\n    devModeLogin,\n    isDevMode: isUsingPlaceholders,\n    checkAuthState\n  };\n\n  // Log auth state for debugging\n  console.log(\"Auth state:\", {\n    isAuthenticated: !!user,\n    isDevMode: isUsingPlaceholders,\n    loading,\n    userEmail: user === null || user === void 0 ? void 0 : user.email\n  });\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 297,\n    columnNumber: 10\n  }, this);\n}\n\n// Custom hook to use the auth context\n_s(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nexport function useAuth() {\n  _s2();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","getCurrentSession","getCurrentUser","signOut","signIn","storeAuthInSW","getAuthFromSW","clearAuthFromSW","supabase","jsxDEV","_jsxDEV","AuthContext","isUsingPlaceholders","supabaseUrl","includes","STORAGE_KEYS","AuthProvider","children","_s","user","setUser","loading","setLoading","console","log","checkStoredUser","key","storedUser","localStorage","getItem","parsedUser","JSON","parse","e","error","err","removeItem","swUser","setItem","stringify","init","userFound","session","userData","data","authListener","auth","onAuthStateChange","event","subscription","unsubscribe","login","email","password","devModeLogin","Error","logout","mockUser","id","user_metadata","name","created_at","Date","toISOString","setTimeout","window","location","reload","Promise","resolve","reject","checkAuthState","value","isAuthenticated","isDevMode","userEmail","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","undefined","$RefreshReg$"],"sources":["/Applications/MAMP/htdocs/ticketmaster/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext } from 'react';\nimport { getCurrentSession, getCurrentUser, signOut, signIn } from '../services/authService';\nimport { storeAuthInSW, getAuthFromSW, clearAuthFromSW } from '../services/authServiceWorker';\nimport supabase from '../supabaseClient';\n\nconst AuthContext = createContext();\n\n// Check if we're using placeholder values\nconst isUsingPlaceholders = supabase.supabaseUrl.includes('placeholder-project');\n\n// Local storage keys for the mock user - check multiple keys to maximize chances of finding a user\nconst STORAGE_KEYS = ['devModeUser_v2', 'devModeUser_v1', 'devModeUser', 'devModeUser_bypass'];\n\nexport function AuthProvider({ children }) {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Check for dev mode user in localStorage and service worker on initial load\n  useEffect(() => {\n    console.log(\"AuthProvider initialized, checking for stored user\");\n    \n    const checkStoredUser = async () => {\n      // If we're in dev mode, check local storage first\n      if (isUsingPlaceholders) {\n        console.log(\"Using placeholder mode, checking localStorage for multiple keys\");\n        \n        // Try all possible storage keys\n        for (const key of STORAGE_KEYS) {\n          try {\n            const storedUser = localStorage.getItem(key);\n            if (storedUser) {\n              const parsedUser = JSON.parse(storedUser);\n              console.log(`Found stored dev mode user in ${key}:`, parsedUser);\n              setUser(parsedUser);\n              \n              // Also store in service worker for extra persistence\n              try {\n                await storeAuthInSW(parsedUser);\n              } catch (e) {\n                console.error(\"Error storing user in service worker:\", e);\n              }\n              \n              setLoading(false);\n              return true;\n            }\n          } catch (err) {\n            console.error(`Error parsing stored user from ${key}:`, err);\n            localStorage.removeItem(key);\n          }\n        }\n        \n        // If not found in localStorage, try service worker\n        try {\n          const swUser = await getAuthFromSW();\n          if (swUser) {\n            console.log(\"Found user in service worker:\", swUser);\n            setUser(swUser);\n            \n            // Also store in localStorage for extra persistence\n            localStorage.setItem(STORAGE_KEYS[0], JSON.stringify(swUser));\n            \n            setLoading(false);\n            return true;\n          }\n        } catch (e) {\n          console.error(\"Error getting user from service worker:\", e);\n        }\n      }\n      return false;\n    };\n\n    // If no stored user, continue with normal flow\n    async function init() {\n      const userFound = await checkStoredUser();\n      \n      if (!userFound) {\n        if (!isUsingPlaceholders) {\n          console.log(\"Using real Supabase auth\");\n          // Check active session with Supabase\n          try {\n            const session = await getCurrentSession();\n            if (session?.session) {\n              const userData = await getCurrentUser();\n              setUser(userData);\n            }\n          } catch (error) {\n            console.error('Error loading user:', error);\n          } finally {\n            setLoading(false);\n          }\n          \n          // Listen for auth changes with Supabase\n          const { data: authListener } = supabase.auth.onAuthStateChange(\n            async (event, session) => {\n              console.log(\"Auth state changed:\", event);\n              if (event === 'SIGNED_IN' && session) {\n                const user = await getCurrentUser();\n                setUser(user);\n              } else if (event === 'SIGNED_OUT') {\n                setUser(null);\n              }\n            }\n          );\n\n          // Cleanup function\n          return () => {\n            if (authListener && authListener.subscription) {\n              authListener.subscription.unsubscribe();\n            }\n          };\n        } else {\n          // In development mode with no stored user, just set loading to false\n          console.log(\"Development mode with no stored user\");\n          setLoading(false);\n        }\n      }\n    }\n    \n    init();\n  }, []);\n\n  const login = async (email, password) => {\n    console.log(\"Login attempt for:\", email);\n    try {\n      // In dev mode, bypass real auth and use mock data\n      if (isUsingPlaceholders) {\n        console.log(\"Using mock login in dev mode\");\n        return await devModeLogin(email);\n      }\n      \n      // Real Supabase auth\n      const data = await signIn(email, password);\n      \n      if (data.user) {\n        setUser(data.user);\n        return data;\n      }\n      \n      throw new Error('Login failed');\n    } catch (error) {\n      console.error('Error logging in:', error);\n      throw error;\n    }\n  };\n\n  const logout = async () => {\n    console.log(\"Logout attempt\");\n    try {\n      if (isUsingPlaceholders) {\n        console.log(\"Removing dev mode user\");\n        \n        // Clear all possible storage keys\n        for (const key of STORAGE_KEYS) {\n          localStorage.removeItem(key);\n        }\n        \n        // Also clear from service worker\n        try {\n          await clearAuthFromSW();\n        } catch (e) {\n          console.error(\"Error clearing user from service worker:\", e);\n        }\n        \n        setUser(null);\n        return true;\n      }\n      \n      await signOut();\n      setUser(null);\n      return true;\n    } catch (error) {\n      console.error('Error signing out:', error);\n      return false;\n    }\n  };\n\n  // For development mode, let's add a function to simulate login\n  const devModeLogin = async (email) => {\n    console.log(\"Dev mode login for:\", email);\n    if (isUsingPlaceholders) {\n      const mockUser = {\n        id: 'mock-user-id',\n        email: email || 'test@example.com',\n        user_metadata: {\n          name: 'Test User',\n        },\n        created_at: new Date().toISOString()\n      };\n      \n      try {\n        // Clear any existing user data from all possible keys\n        for (const key of STORAGE_KEYS) {\n          localStorage.removeItem(key);\n        }\n        \n        // Store mock user in all storage keys for redundancy\n        for (const key of STORAGE_KEYS) {\n          localStorage.setItem(key, JSON.stringify(mockUser));\n        }\n        \n        // Also store in service worker for extra persistence\n        try {\n          await storeAuthInSW(mockUser);\n        } catch (e) {\n          console.error(\"Error storing user in service worker:\", e);\n        }\n        \n        // Update state immediately\n        setUser(mockUser);\n        console.log('Dev mode login successful, user state updated:', mockUser);\n        \n        // Force a reload to ensure all components pick up the new user\n        setTimeout(() => {\n          window.location.reload();\n        }, 500);\n        \n        // Return a promise to match the signature of the real login\n        return Promise.resolve({ user: mockUser });\n      } catch (error) {\n        console.error('Error in dev mode login:', error);\n        return Promise.reject(new Error('Failed to store mock user'));\n      }\n    }\n    return Promise.reject(new Error('Dev mode not enabled'));\n  };\n\n  // Force update the authentication state (useful when localStorage is cleared manually)\n  const checkAuthState = async () => {\n    console.log(\"Checking auth state\");\n    if (isUsingPlaceholders) {\n      try {\n        // Try all possible storage keys\n        for (const key of STORAGE_KEYS) {\n          const storedUser = localStorage.getItem(key);\n          if (storedUser) {\n            try {\n              const parsedUser = JSON.parse(storedUser);\n              console.log(`Setting user from stored data in ${key}:`, parsedUser.email);\n              setUser(parsedUser);\n              return true;\n            } catch (err) {\n              console.error(`Error parsing stored user from ${key}:`, err);\n              localStorage.removeItem(key);\n            }\n          }\n        }\n        \n        // If not found in localStorage, try service worker as a backup\n        try {\n          const swUser = await getAuthFromSW();\n          if (swUser) {\n            console.log(\"Found user in service worker:\", swUser);\n            setUser(swUser);\n            \n            // Also store in localStorage for extra persistence\n            localStorage.setItem(STORAGE_KEYS[0], JSON.stringify(swUser));\n            \n            return true;\n          }\n        } catch (e) {\n          console.error(\"Error getting user from service worker:\", e);\n        }\n        \n        // If we get here, no valid user was found\n        setUser(null);\n        console.log(\"No stored user found in any location, setting user to null\");\n        return false;\n      } catch (error) {\n        console.error('Error checking auth state:', error);\n        setUser(null);\n        return false;\n      }\n    }\n    return !!user;\n  };\n\n  // Make auth state available to consumers\n  const value = {\n    user,\n    loading,\n    login,\n    logout,\n    isAuthenticated: !!user,\n    devModeLogin,\n    isDevMode: isUsingPlaceholders,\n    checkAuthState\n  };\n\n  // Log auth state for debugging\n  console.log(\"Auth state:\", { \n    isAuthenticated: !!user, \n    isDevMode: isUsingPlaceholders, \n    loading,\n    userEmail: user?.email\n  });\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n}\n\n// Custom hook to use the auth context\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}