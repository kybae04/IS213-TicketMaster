{"ast":null,"code":"var _jsxFileName = \"/Applications/MAMP/htdocs/ticketmaster/src/context/AuthContext.js\";\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport { getCurrentSession, getCurrentUser, signOut, signIn } from '../services/authService';\nimport supabase from '../supabaseClient';\nconst AuthContext = createContext();\n\n// Check if we're using placeholder values\nconst isUsingPlaceholders = supabase.supabaseUrl.includes('placeholder-project');\nexport function AuthProvider({\n  children\n}) {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Check active session\n    async function loadUser() {\n      try {\n        const session = await getCurrentSession();\n        if (session === null || session === void 0 ? void 0 : session.session) {\n          const userData = await getCurrentUser();\n          setUser(userData);\n        }\n      } catch (error) {\n        console.error('Error loading user:', error);\n      } finally {\n        setLoading(false);\n      }\n    }\n    loadUser();\n\n    // Only set up auth listener if not using placeholders\n    if (!isUsingPlaceholders) {\n      // Listen for auth changes\n      const {\n        data: authListener\n      } = supabase.auth.onAuthStateChange(async (event, session) => {\n        if (event === 'SIGNED_IN' && session) {\n          const user = await getCurrentUser();\n          setUser(user);\n        } else if (event === 'SIGNED_OUT') {\n          setUser(null);\n        }\n      });\n\n      // Cleanup function\n      return () => {\n        if (authListener && authListener.subscription) {\n          authListener.subscription.unsubscribe();\n        }\n      };\n    } else {\n      // In development mode, just set loading to false\n      setLoading(false);\n      return () => {}; // Empty cleanup function\n    }\n  }, []);\n  const login = async (email, password) => {\n    try {\n      const data = await signIn(email, password);\n      if (data.user) {\n        setUser(data.user);\n        return data;\n      }\n      throw new Error('Login failed');\n    } catch (error) {\n      console.error('Error logging in:', error);\n      throw error;\n    }\n  };\n  const logout = async () => {\n    try {\n      await signOut();\n      setUser(null);\n    } catch (error) {\n      console.error('Error signing out:', error);\n    }\n  };\n\n  // For development mode, let's add a function to simulate login\n  const devModeLogin = email => {\n    if (isUsingPlaceholders) {\n      setUser({\n        id: 'mock-user-id',\n        email: email || 'test@example.com',\n        created_at: new Date().toISOString()\n      });\n    }\n  };\n  const value = {\n    user,\n    loading,\n    login,\n    logout,\n    isAuthenticated: !!user,\n    devModeLogin,\n    // Add this for development testing\n    isDevMode: isUsingPlaceholders\n  };\n  return /*#__PURE__*/React.createElement(AuthContext.Provider, {\n    value: value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 10\n    }\n  }, children);\n}\n\n// Custom hook to use the auth context\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","getCurrentSession","getCurrentUser","signOut","signIn","supabase","AuthContext","isUsingPlaceholders","supabaseUrl","includes","AuthProvider","children","user","setUser","loading","setLoading","loadUser","session","userData","error","console","data","authListener","auth","onAuthStateChange","event","subscription","unsubscribe","login","email","password","Error","logout","devModeLogin","id","created_at","Date","toISOString","value","isAuthenticated","isDevMode","createElement","Provider","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","useAuth","context","undefined"],"sources":["/Applications/MAMP/htdocs/ticketmaster/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext } from 'react';\nimport { getCurrentSession, getCurrentUser, signOut, signIn } from '../services/authService';\nimport supabase from '../supabaseClient';\n\nconst AuthContext = createContext();\n\n// Check if we're using placeholder values\nconst isUsingPlaceholders = supabase.supabaseUrl.includes('placeholder-project');\n\nexport function AuthProvider({ children }) {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // Check active session\n    async function loadUser() {\n      try {\n        const session = await getCurrentSession();\n        if (session?.session) {\n          const userData = await getCurrentUser();\n          setUser(userData);\n        }\n      } catch (error) {\n        console.error('Error loading user:', error);\n      } finally {\n        setLoading(false);\n      }\n    }\n\n    loadUser();\n\n    // Only set up auth listener if not using placeholders\n    if (!isUsingPlaceholders) {\n      // Listen for auth changes\n      const { data: authListener } = supabase.auth.onAuthStateChange(\n        async (event, session) => {\n          if (event === 'SIGNED_IN' && session) {\n            const user = await getCurrentUser();\n            setUser(user);\n          } else if (event === 'SIGNED_OUT') {\n            setUser(null);\n          }\n        }\n      );\n\n      // Cleanup function\n      return () => {\n        if (authListener && authListener.subscription) {\n          authListener.subscription.unsubscribe();\n        }\n      };\n    } else {\n      // In development mode, just set loading to false\n      setLoading(false);\n      return () => {}; // Empty cleanup function\n    }\n  }, []);\n\n  const login = async (email, password) => {\n    try {\n      const data = await signIn(email, password);\n      \n      if (data.user) {\n        setUser(data.user);\n        return data;\n      }\n      \n      throw new Error('Login failed');\n    } catch (error) {\n      console.error('Error logging in:', error);\n      throw error;\n    }\n  };\n\n  const logout = async () => {\n    try {\n      await signOut();\n      setUser(null);\n    } catch (error) {\n      console.error('Error signing out:', error);\n    }\n  };\n\n  // For development mode, let's add a function to simulate login\n  const devModeLogin = (email) => {\n    if (isUsingPlaceholders) {\n      setUser({\n        id: 'mock-user-id',\n        email: email || 'test@example.com',\n        created_at: new Date().toISOString()\n      });\n    }\n  };\n\n  const value = {\n    user,\n    loading,\n    login,\n    logout,\n    isAuthenticated: !!user,\n    devModeLogin, // Add this for development testing\n    isDevMode: isUsingPlaceholders\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n}\n\n// Custom hook to use the auth context\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}