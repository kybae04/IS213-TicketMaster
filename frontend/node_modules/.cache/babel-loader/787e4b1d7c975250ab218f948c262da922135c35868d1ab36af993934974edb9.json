{"ast":null,"code":"var _jsxFileName = \"/Applications/MAMP/htdocs/ticketmaster/src/components/ui/SimpleSparkles.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SimpleSparkles = ({\n  className,\n  particleColor = '#57A5FF',\n  particleCount = 120,\n  minSize = 0.8,\n  maxSize = 1.6,\n  speed = 5.0,\n  connectDistance = 150\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext('2d');\n    const particles = [];\n\n    // Resize handler\n    const handleResize = () => {\n      canvas.width = canvas.offsetWidth;\n      canvas.height = canvas.offsetHeight;\n      createParticles();\n    };\n\n    // Create particles\n    const createParticles = () => {\n      particles.length = 0;\n      for (let i = 0; i < particleCount; i++) {\n        particles.push({\n          x: Math.random() * canvas.width,\n          y: Math.random() * canvas.height,\n          size: Math.random() * (maxSize - minSize) + minSize,\n          speedX: (Math.random() - 0.5) * speed,\n          speedY: (Math.random() - 0.5) * speed,\n          opacity: Math.random() * 0.5 + 0.5,\n          // Variable opacity for more depth\n          hue: Math.random() * 40 - 20 // Slight hue variation\n        });\n      }\n    };\n\n    // Create shimmer effect\n    const updateParticleOpacity = particle => {\n      // Make particles pulse slightly\n      particle.opacity += (Math.random() - 0.5) * 0.05;\n      particle.opacity = Math.max(0.4, Math.min(1, particle.opacity));\n    };\n\n    // Animation loop\n    const animate = () => {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n      // Draw and update particles\n      for (let i = 0; i < particles.length; i++) {\n        const p = particles[i];\n\n        // Update opacity for shimmer effect\n        updateParticleOpacity(p);\n\n        // Get color with hue variation\n        const baseColor = particleColor;\n        let r = parseInt(baseColor.slice(1, 3), 16);\n        let g = parseInt(baseColor.slice(3, 5), 16);\n        let b = parseInt(baseColor.slice(5, 7), 16);\n\n        // Brighten particles\n        r = Math.min(255, r + 30);\n        g = Math.min(255, g + 30);\n        b = Math.min(255, b + 30);\n\n        // Apply particle's hue variation and opacity\n        const particleFillColor = `rgba(${r}, ${g}, ${b}, ${p.opacity})`;\n\n        // Draw particle\n        ctx.beginPath();\n        ctx.arc(p.x, p.y, p.size, 0, Math.PI * 2);\n        ctx.fillStyle = particleFillColor;\n        ctx.fill();\n\n        // Add glow effect\n        ctx.shadowBlur = 10;\n        ctx.shadowColor = particleFillColor;\n\n        // Update position\n        p.x += p.speedX;\n        p.y += p.speedY;\n\n        // Bounce off edges\n        if (p.x < 0 || p.x > canvas.width) p.speedX = -p.speedX;\n        if (p.y < 0 || p.y > canvas.height) p.speedY = -p.speedY;\n\n        // Connect nearby particles\n        for (let j = i + 1; j < particles.length; j++) {\n          const p2 = particles[j];\n          const distance = Math.sqrt(Math.pow(p.x - p2.x, 2) + Math.pow(p.y - p2.y, 2));\n          if (distance < connectDistance) {\n            ctx.beginPath();\n            // Use gradient for connections\n            const gradient = ctx.createLinearGradient(p.x, p.y, p2.x, p2.y);\n            gradient.addColorStop(0, `rgba(${r}, ${g}, ${b}, ${(1 - distance / connectDistance) * 0.5 * p.opacity})`);\n            gradient.addColorStop(1, `rgba(${r}, ${g}, ${b}, ${(1 - distance / connectDistance) * 0.5 * p2.opacity})`);\n            ctx.strokeStyle = gradient;\n            ctx.lineWidth = 0.6;\n            ctx.moveTo(p.x, p.y);\n            ctx.lineTo(p2.x, p2.y);\n            ctx.stroke();\n          }\n        }\n      }\n      ctx.shadowBlur = 0; // Reset shadow for performance\n      requestAnimationFrame(animate);\n    };\n\n    // Initialize\n    handleResize();\n    window.addEventListener('resize', handleResize);\n\n    // Start animation\n    const animationId = requestAnimationFrame(animate);\n\n    // Cleanup\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      cancelAnimationFrame(animationId);\n    };\n  }, [particleColor, particleCount, minSize, maxSize, speed, connectDistance]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    className: `absolute inset-0 w-full h-full ${className || ''}`,\n    style: {\n      backgroundColor: 'transparent'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 5\n  }, this);\n};\n_s(SimpleSparkles, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = SimpleSparkles;\nexport default SimpleSparkles;\nvar _c;\n$RefreshReg$(_c, \"SimpleSparkles\");","map":{"version":3,"names":["React","useEffect","useRef","jsxDEV","_jsxDEV","SimpleSparkles","className","particleColor","particleCount","minSize","maxSize","speed","connectDistance","_s","canvasRef","canvas","current","ctx","getContext","particles","handleResize","width","offsetWidth","height","offsetHeight","createParticles","length","i","push","x","Math","random","y","size","speedX","speedY","opacity","hue","updateParticleOpacity","particle","max","min","animate","clearRect","p","baseColor","r","parseInt","slice","g","b","particleFillColor","beginPath","arc","PI","fillStyle","fill","shadowBlur","shadowColor","j","p2","distance","sqrt","pow","gradient","createLinearGradient","addColorStop","strokeStyle","lineWidth","moveTo","lineTo","stroke","requestAnimationFrame","window","addEventListener","animationId","removeEventListener","cancelAnimationFrame","ref","style","backgroundColor","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Applications/MAMP/htdocs/ticketmaster/src/components/ui/SimpleSparkles.jsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\n\nconst SimpleSparkles = ({ \n  className, \n  particleColor = '#57A5FF', \n  particleCount = 120, \n  minSize = 0.8,\n  maxSize = 1.6, \n  speed = 5.0,\n  connectDistance = 150\n}) => {\n  const canvasRef = useRef(null);\n  \n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    \n    const ctx = canvas.getContext('2d');\n    const particles = [];\n    \n    // Resize handler\n    const handleResize = () => {\n      canvas.width = canvas.offsetWidth;\n      canvas.height = canvas.offsetHeight;\n      createParticles();\n    };\n    \n    // Create particles\n    const createParticles = () => {\n      particles.length = 0;\n      for (let i = 0; i < particleCount; i++) {\n        particles.push({\n          x: Math.random() * canvas.width,\n          y: Math.random() * canvas.height,\n          size: Math.random() * (maxSize - minSize) + minSize,\n          speedX: (Math.random() - 0.5) * speed,\n          speedY: (Math.random() - 0.5) * speed,\n          opacity: Math.random() * 0.5 + 0.5, // Variable opacity for more depth\n          hue: Math.random() * 40 - 20, // Slight hue variation\n        });\n      }\n    };\n    \n    // Create shimmer effect\n    const updateParticleOpacity = (particle) => {\n      // Make particles pulse slightly\n      particle.opacity += (Math.random() - 0.5) * 0.05;\n      particle.opacity = Math.max(0.4, Math.min(1, particle.opacity));\n    };\n    \n    // Animation loop\n    const animate = () => {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      \n      // Draw and update particles\n      for (let i = 0; i < particles.length; i++) {\n        const p = particles[i];\n        \n        // Update opacity for shimmer effect\n        updateParticleOpacity(p);\n        \n        // Get color with hue variation\n        const baseColor = particleColor;\n        let r = parseInt(baseColor.slice(1, 3), 16);\n        let g = parseInt(baseColor.slice(3, 5), 16);\n        let b = parseInt(baseColor.slice(5, 7), 16);\n        \n        // Brighten particles\n        r = Math.min(255, r + 30);\n        g = Math.min(255, g + 30);\n        b = Math.min(255, b + 30);\n        \n        // Apply particle's hue variation and opacity\n        const particleFillColor = `rgba(${r}, ${g}, ${b}, ${p.opacity})`;\n        \n        // Draw particle\n        ctx.beginPath();\n        ctx.arc(p.x, p.y, p.size, 0, Math.PI * 2);\n        ctx.fillStyle = particleFillColor;\n        ctx.fill();\n        \n        // Add glow effect\n        ctx.shadowBlur = 10;\n        ctx.shadowColor = particleFillColor;\n        \n        // Update position\n        p.x += p.speedX;\n        p.y += p.speedY;\n        \n        // Bounce off edges\n        if (p.x < 0 || p.x > canvas.width) p.speedX = -p.speedX;\n        if (p.y < 0 || p.y > canvas.height) p.speedY = -p.speedY;\n        \n        // Connect nearby particles\n        for (let j = i + 1; j < particles.length; j++) {\n          const p2 = particles[j];\n          const distance = Math.sqrt(\n            Math.pow(p.x - p2.x, 2) + Math.pow(p.y - p2.y, 2)\n          );\n          \n          if (distance < connectDistance) {\n            ctx.beginPath();\n            // Use gradient for connections\n            const gradient = ctx.createLinearGradient(p.x, p.y, p2.x, p2.y);\n            gradient.addColorStop(0, `rgba(${r}, ${g}, ${b}, ${(1 - distance / connectDistance) * 0.5 * p.opacity})`);\n            gradient.addColorStop(1, `rgba(${r}, ${g}, ${b}, ${(1 - distance / connectDistance) * 0.5 * p2.opacity})`);\n            \n            ctx.strokeStyle = gradient;\n            ctx.lineWidth = 0.6;\n            ctx.moveTo(p.x, p.y);\n            ctx.lineTo(p2.x, p2.y);\n            ctx.stroke();\n          }\n        }\n      }\n      \n      ctx.shadowBlur = 0; // Reset shadow for performance\n      requestAnimationFrame(animate);\n    };\n    \n    // Initialize\n    handleResize();\n    window.addEventListener('resize', handleResize);\n    \n    // Start animation\n    const animationId = requestAnimationFrame(animate);\n    \n    // Cleanup\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      cancelAnimationFrame(animationId);\n    };\n  }, [particleColor, particleCount, minSize, maxSize, speed, connectDistance]);\n  \n  return (\n    <canvas\n      ref={canvasRef}\n      className={`absolute inset-0 w-full h-full ${className || ''}`}\n      style={{ backgroundColor: 'transparent' }}\n    />\n  );\n};\n\nexport default SimpleSparkles; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}